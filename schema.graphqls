schema {
	query: Query
}

type Query {
    findContentByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedMainType
    findReviewByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedReviewType
    findReplyByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedReplyType
    findLikeByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedLikeType
    findDisLikeByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedDisLikeType
    findHelpfullByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedHelpfullType
    findReplyOnReplyByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedReplyOnReplyType
    findUserByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedUserType    
}

type AutogeneratedMainType {
 start: String
  row: String
  statusCode: Int
  totalRecords: Int
  advanced: [AdvancedContent]
  records: [RecordsContent]
}

type RecordsContent {
  ID: String
  contentName: String
  contentDesc: String
  contentType: String
  contentSubType: String
  myOwnField_s: String
  try: String
  _root_: String
  logic: String
  
  findReviewByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedReviewType
}

type ValuesContent {
  name: String
  count: Int
}

type AdvancedContent {
  fieldName: String
  values: [ValuesContent]
}

type ValuesReview {
    name: String
    count: Int
  }
  
  type AdvancedReview {
    fieldName: String
    values: [ValuesReview]
  }
  
type RecordsReview {
  reviewComments: String
  reviewRatting: String
  reviewUserId: String
  reviewContentId: String
  ID: String
  findUserByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedUserType
  findLikeByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedLikeType
  findHelpfullByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedHelpfullType
  findReplyByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedReplyType
}
  
  type AutogeneratedReviewType {
    start: String
    row: String
    statusCode: Int
    totalRecords: Int
    advanced: [AdvancedReview]
    records: [RecordsReview]
  }

  type ValuesReply {
  name: String
  count: Int
}

type AdvancedReply {
  fieldName: String
  values: [ValuesReply]
}

type RecordsReply {
  ID: String
  contentId: String
  reviewId: String
  userId: String
  replyHeading: String
  replyBody: String
  findUserByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedUserType
}

type AutogeneratedReplyType {
  start: String
  row: String
  statusCode: Int
  totalRecords: Int
  advanced: [AdvancedReply]
  records: [RecordsReply]
}

type AutogeneratedLikeType {
  start: String
  row: String
  statusCode: Int
  totalRecords: Int
  advanced: [AdvancedLike]
  records: [RecordsLike]
}

type RecordsLike {
  ID: String
  contentId: String
  reviewId: String
  userId: String
  like: String
  findUserByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedUserType
 
}

type AdvancedLike {
  fieldName: String
  values: [ValuesLike]
}

  type ValuesLike {
  name: String
  count: Int
}




type AutogeneratedDisLikeType {
  start: String
  row: String
  statusCode: Int
  totalRecords: Int
  advanced: [AdvancedDisLike]
  records: [RecordsDisLike]
}

type RecordsDisLike {
  ID: String
  contentId: String
  reviewId: String
  userId: String
  replyHeading: String
  replyBody: String
}

type AdvancedDisLike {
  fieldName: String
  values: [ValuesDisLike]
}

  type ValuesDisLike {
  name: String
  count: Int
}


type AutogeneratedHelpfullType {
  start: String
  row: String
  statusCode: Int
  totalRecords: Int
  advanced: [AdvancedHelpfull]
  records: [RecordsHelpfull]
}

type RecordsHelpfull {
  ID: String
  contentId: String
  reviewId: String
  userId: String
  helpFull: String
    findUserByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): AutogeneratedUserType
}

type AdvancedHelpfull {
  fieldName: String
  values: [ValuesHelpfull]
}

  type ValuesHelpfull {
  name: String
  count: Int
}




type AutogeneratedReplyOnReplyType {
  start: String
  row: String
  statusCode: Int
  totalRecords: Int
  advanced: [AdvancedReplyOnReply]
  records: [RecordsReplyOnReply]
}

type RecordsReplyOnReply {
  ID: String
  contentId: String
  reviewId: String
  userId: String
  replyHeading: String
  replyBody: String
}

type AdvancedReplyOnReply {
  fieldName: String
  values: [ValuesReplyOnReply]
}

type ValuesReplyOnReply {
  name: String
  count: Int
}



type AutogeneratedUserType {
  start: String
  row: String
  statusCode: Int
  totalRecords: Int
  advanced: [AdvancedUser]
  records: [RecordsUser]
}

type RecordsUser {
  ID: String
  email: String
  firstName: String
  lastName: String
  phoneNumber: String
  gender: String
  userStatus:String
}

type AdvancedUser {
  fieldName: String
  values: [ValuesUser]
}

type ValuesUser {
  name: String
  count: Int
}

